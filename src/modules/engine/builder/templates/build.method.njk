async fn_{{nodeContext.id}} (flowModel) {

  if(this.endNodeIsReached ){
    Logger.debug(`Process Instance: ${this.__metaInfo.processInstanceId} is either has reached an end node or it was aborted or failure occurred!`);
    return;
  }

  if(this.parentProcessInstance !== undefined &&  this.parentProcessInstance.__metaInfo.endNodeIsReached){
    Logger.debug(`Parent Process Instance: ${this.parentProcessInstance.__metaInfo.processInstanceId} has reached an end node`);
    return;
  }

  let __localMethodContext = {
    nodeSession: crypto.randomUUID(),
    nodeId: '{{ nodeContext.id }}',
    nodeName: '{{ nodeContext.name }}',
    type: '{{ nodeContext.type }}',
    incomingFlowId: flowModel?.id
  }

  Logger.debug(`visiting node {{ nodeContext.id }}, session: ${__localMethodContext.nodeSession}`);
    {% if nodeContext.type !== 'SubProcess'%}
  try {
{% if nodeContext.args and nodeContext.args.executeBody !== null  %}
    if(flowModel.executeBody) {
{% endif %}

      {{ nodeContext.body }}
      await this.variables.saveContext();
{% if nodeContext.args and nodeContext.args.resumeExecution !== null  %}
      if(flowModel.resumeExecution){
{% endif %}

          {% include "build.method.next.calls.njk" %}
{% if nodeContext.args and nodeContext.args.resumeExecution !== null  %}
      }
{% endif %}
{% if nodeContext.args and nodeContext.args.executeBody !== null %}
    }else{
      {{ nodeContext.alternateBody }}
    }
{% endif %}
  } catch (_bpmnProcessorException) {
    Logger.error(_bpmnProcessorException)
    const stack = _bpmnProcessorException.stack;
    throw new Error(JSON.stringify({ stacktrace: stack, context: __localMethodContext }));
  }
  {% endif %}

}

