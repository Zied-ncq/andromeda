import  {AndromedaLogger} from "./src/config/andromeda-logger.js";
const Logger = new AndromedaLogger();
import Config from "./src/config/config.js";


export class App {


    modules = []
    loadedModules = 0;

    host
    port

    constructor(host, port) {
        this.host = host || Config.getInstance().host
        this.port  = port || Config.getInstance().port
    }

    async  executePromisesSequentially(modulePromisesArr) {
        for (let i=0; i < modulePromisesArr.length; i++) {
            modulePromisesArr[i].start();
            this.loadedModules = this.loadedModules +1;
        }
    }

    async  initPersistenceModule() {
        try {
            Logger.info(`INIT Persistence MODULE`);
            const Persistence = await import('./src/modules/persistence/persistence.module.js')
            const persistence = new Persistence.PersistenceModule();
            this.modules.push(persistence)
        } catch (e) {
            Logger.error(e)
        }
    }

    async  initContainerModule() {
        try {
            const ContainerModulePromise = await import ('./src/modules/container/container.module.js')
            let containerModule = new ContainerModulePromise.ContainerModule();
            this.modules.push(containerModule);
        } catch (e) {
            Logger.error(e)
        }
    }

    async  initWebModule() {
        try {
            let web = await import ('./src/modules/web/web.module.js')
            let webModule = new web.WebModule(this.host, this.port);
            this.modules.push(webModule);
        } catch (e) {
            Logger.error(e)
        }
    }

    async init(){
        await this.initPersistenceModule();
        await this.initContainerModule();
        await this.initWebModule();
        Logger.info(`INIT (${this.modules.length}) MODULES `)
        await this.executePromisesSequentially(this.modules);
    }

    static async close(){
    }

}

