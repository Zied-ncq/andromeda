import  {AndromedaLogger} from "../config/andromeda-logger.js";
const Logger = AndromedaLogger;
import ProcessInstanceContext from "./{{ ProcessDef }}.process-instance-context.js";
import {ProcessInstanceStatus} from "../config/constants.js";
import {PersistenceGateway} from "../modules/persistence/event-store/persistence-gateway.js";
import ContainerService from "../modules/container/container.service.js";
import {WorkflowHelper} from "./workflow-helper.js";



class {{ServiceClassName}} {


    serviceContext;

    processInstanceId

    // flowModel is the flow used for subprocess to create a sub process instance
    flowModel

    parentProcessInstance

    variables = new ProcessInstanceContext();

    workflowhelper = new WorkflowHelper(this)

    endNodeIsReached = false;

    // _context = new {{ ProcessDef }}ProcessInstanceContext();

    bootstrap(variables){
    }



    constructor(processInstanceId, flowModel, parentProcessInstance)
    {
        if (processInstanceId !== null && processInstanceId !== undefined ) {
            // in case we resume a process instance after a container restart
            this.processInstanceId = processInstanceId;
            // this.flowService = new TestFlowService(this.id);
        } else {
            const id  = crypto.randomUUID()
            Logger.debug(`Creating new Process instance id= ${id}`)
            this.processInstanceId = crypto.randomUUID();
            // this.flowService = new TestFlowService(this.id);
        }

        if (flowModel !== null && flowModel !== undefined ) {
            this.flowModel = flowModel
        }

        if (parentProcessInstance !== null && parentProcessInstance !== undefined ) {
            this.parentProcessInstance = parentProcessInstance
        }

    }

    static async createInstance(processInstanceId, flowModel)
    {

        {% if process.hasParentProcess === true %}
            return new {{ServiceClassName}}(processInstanceId, flowModel)
        {% else %}
        const instance = new {{ServiceClassName}}(processInstanceId)
        // ContainerService.getInstance().lock(instance)
        await PersistenceGateway.newProcessInstance(ContainerService.containerId,
            '{{containerParsingContext.wpid}}',
            '{{ProcessDef}}',
            '{{containerParsingContext.version}}',
            instance.processInstanceId);
        return instance;
        {% endif %}


    }


}

export default {{ServiceClassName}}