import  {AndromedaLogger} from "../config/andromeda-logger.js";
const Logger = AndromedaLogger;
import {{cnwpid}}ProcessInstanceContext from "./{{ nwpid }}.process-instance-context.js";
import {ProcessInstanceStatus} from "../config/constants.js";
import {PersistenceGateway} from "../modules/persistence/event-store/persistence-gateway.js";
import ContainerService from "../modules/container/container.service.js";
import {WorkflowHelper} from "./workflow-helper.js";
import {MetaInfoJs} from "./meta-info.js";



class {{ServiceClassName}} {

    __metaInfo = new MetaInfoJs(this)

    variables = new {{cnwpid}}ProcessInstanceContext(this);

    currentlyUsedFunctions  = new Map();

    async bootstrap(variables){

        Object.keys(variables).forEach(v => {
            this.variables.__metaVariables.forEach(metaVar => {
                if (v === metaVar.name) {
                    metaVar.setValue(variables[v]);
                }
            });
        });

    }

    /**
     *  @param  processInstanceId {string | undefined}, if the processInstanceId === null => new process instance
     */
    constructor(processInstanceId, flowModel, parentProcessInstance)
    {
        if (processInstanceId !== null && processInstanceId !== undefined ) {
            // in case we resume a process instance after a container restart
            this.__metaInfo.processInstanceId = processInstanceId;
            // this.flowService = new TestFlowService(this.id);
        } else {
            const id  = crypto.randomUUID()
            Logger.debug(`Creating new Process instance id= ${id}`)
            this.__metaInfo.processInstanceId = crypto.randomUUID();
            // this.flowService = new TestFlowService(this.id);
        }

        if (flowModel !== null && flowModel !== undefined ) {
            this.__metaInfo.flowModel = flowModel
        }

        if (parentProcessInstance !== null && parentProcessInstance !== undefined ) {
            this.__metaInfo.parentProcessInstance = parentProcessInstance
        }else{
            Logger.debug(`Registering Process instance with id= ${this.__metaInfo.processInstanceId} in the current container ${ContainerService.containerId}`)
            ContainerService.processInstances.set(this.__metaInfo.processInstanceId, this);
        }

    }


    invokeFunction(fn, __localMethodContext, args)
    {
        const self = this;
        fn.call(this, ...Object.values(args))
            .catch(async (error) =>
            {
                // self.functionProcessing.set(__localMethodContext.functionName, false);
                // let errorMessage = JSON.parse(error.message);
                // let context = errorMessage.context;
                // let stack = errorMessage.stacktrace;
                // let nodeId;
                // if (context) {
                //     nodeId = context.nodeName;
                // }
                // if (!stack) {
                //     stack = error.stack;
                // }
                // await new JsflowLogHandler().reportError({ invocationId: self.variables.invocationId.value(), nodeId: nodeId, stacktrace: stack });
                this.failureDetected = true;
                await this.failProcessInstance(args.incomingFlowId);
            }).finally(async () => {
            await this.__metaInfo.workflowHelper.cleanProcessInstanceIfItsNotRunning(__localMethodContext);
        });

    }

    static async createInstance(processInstanceId, flowModel)
    {
        {# SubProcess we dont need to persist anything #}
        {% if process.hasParentProcess === true %}
            return new {{ServiceClassName}}(processInstanceId, flowModel)
        {% else %}
        const instance = new {{ServiceClassName}}(processInstanceId)
        if(processInstanceId === undefined || processInstanceId === null){
            // ContainerService.getInstance().lock(instance)
            await PersistenceGateway.newProcessInstance(ContainerService.containerId,
                '{{containerParsingContext.wpid}}',
                '{{containerParsingContext.version}}',
                instance.__metaInfo.processInstanceId);
        }else{
            await instance.variables.restoreVariableValues();

        }

        return instance;
        {% endif %}

    }


}

export default {{ServiceClassName}}