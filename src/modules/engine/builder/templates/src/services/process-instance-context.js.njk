import {Variable} from "../modules/persistence/event-store/model/variable.js";
import {PersistenceGateway} from "../modules/persistence/event-store/persistence-gateway.js";
import ContainerService from "../modules/container/container.service.js";
import {VariableRepository} from "../modules/persistence/event-store/repositories/variable.repository.js";
import  {AndromedaLogger} from "../config/andromeda-logger.js";
const Logger = AndromedaLogger;

class {{ cnwpid }}ProcessInstanceContext {


    processInstanceService;

    {% for var in processVariables %}
    $_{{ var.name  }} = new Variable('{{ var.name }}', '{{ var.type }}' );
    get {{ var.name  }}() { return this.$_{{ var.name  }}.value(); }
    set {{ var.name  }}(val) {  this.$_{{ var.name  }}.setValue(val); }

    {% endfor  %}

    __metaVariables = [{% for var in processVariables %}this.$_{{ var.name  }},{% endfor  %}]

    constructor(parentService) {
        this.processInstanceService = parentService;
    }


    async saveContext(){
        let variables = this.__metaVariables.filter(variable => variable.needToSave());
        await this.createVariables(variables)
    }

    async createVariables(variables) {

        await PersistenceGateway.createProcessVariables(ContainerService.containerId, this.processInstanceService.__metaInfo.processInstanceId, variables, '{{wpid}}' );

    }

    async restoreVariableValues() {
        let variables = await new VariableRepository().getProcessInstanceVariables(this.processInstanceService.__metaInfo.processInstanceId);
        variables.map((variable) => {
            Logger.info(`restoring ${variable.name} of type ${variable.type}`);
            let metaVar = this.__metaVariables.find( e=> e.name === variable.name );
            if(metaVar !== undefined){
                metaVar.id  = variable.id;
                metaVar.setValue(variable.value);
            }
        });
    }

}
export default {{ cnwpid }}ProcessInstanceContext;
