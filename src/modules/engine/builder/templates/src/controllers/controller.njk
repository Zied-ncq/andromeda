import  {AndromedaLogger} from "../config/andromeda-logger.js";
import ContainerService from "../modules/container/container.service.js";
const Logger = AndromedaLogger;

class {{ ControllerClassName }} {

    static start = async (req, res) => {

        try {
            let variables = {};
            if(req.body && req.body.variables){
                variables = JSON.parse(req.body.variables);
            }

            if(req.files){
                Object.keys(req.files).forEach( (file) => {
                Logger.debug(`storing file ${file} in persistent storage`);
                });
            }
            if(!req.params.cnwpid){
                throw new Error(`Process identifier cnwpid is required`)
            }

            if(req.params.cnwpid === '{{ startMethod.name }}'){
                const processInstance = await {{ startMethod.name }}ProcessInstanceService.createInstance();
                await processInstance.bootstrap(variables);
                res.status(200)
                res.send({id: processInstance.__metaInfo.processInstanceId})
            }
            res.status(404)
            res.send("cnwpid, wokflow process id (normalized, camel case, first letter capital) is not correct")

        } catch (err) {
            Logger.error(err)
            const returnError = new Error();
            returnError.statusCode = 500;
            returnError.message = err;
            returnError.stack=err;
            res.status(500)
            res.send(returnError)
            throw returnError;
        }
    }

    static processInstanceStatus = async (req, res) => {

        try {
            let variables = {};
            if(req.body && req.body.variables){
                variables = JSON.parse(req.body.variables);
            }

            if(!req.params.processInstanceId){
                throw new Error(`Process identifier 'processInstanceId' is required`)
            }
            const processInstanceId = req.params.processInstanceId;

            const status = ContainerService.processInstanceStatus(processInstanceId)
            if(status !== undefined){
                return status
            }

        } catch (err) {
            Logger.error(err)
            const returnError = new Error();
            returnError.statusCode = 500;
            returnError.message = err;
            returnError.stack=err;
            res.status(500)
            res.send(returnError)
            throw returnError;
        }
    }


}

export default {{ ControllerClassName }};